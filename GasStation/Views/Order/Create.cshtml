@model GasStation.DTO.CreateOrderDTO

<div class="modal fade" id="paymentModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Płatność</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="paymentForm">
                    <div class="mb-3">
                        <label for="customerSelect" class="form-label">Klient:</label>
                        <select class="form-select" id="customerSelect" name="CustomerNip">
                            <option value="">-- Wybierz klienta --</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="employeeSelect" class="form-label">Pracownik:</label>
                        <select class="form-select" id="employeeSelect" name="EmployeePesel" required>
                            <option value="">-- Wybierz pracownika --</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="paymentType" class="form-label">Sposób płatności:</label>
                        <select class="form-select" id="paymentType" required>
                            <option value="">-- Wybierz --</option>
                            <option value="Cash">Gotówka</option>
                            <option value="Card">Karta</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Suma do zapłaty:</label>
                        <div class="payment-total-amount">
                            <span id="paymentTotalAmount">0.00</span> zł
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
                <button type="button" class="btn btn-primary" id="confirmPayment">Potwierdź</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Pobierz klientów przez AJAX
        fetch('/Customer/GetAllCustomersJson')
            .then(response => response.json())
            .then(data => {
                if (data.success === false) {
                    console.error('Error:', data.message);
                    return;
                }

                const select = document.getElementById('customerSelect');
                data.forEach(customer => {
                    const option = document.createElement('option');
                    option.value = customer.Nip;
                    option.textContent = `${customer.CompanyName} (${customer.Nip})`;
                    select.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Fetch error:', error);
            });
    });

    document.addEventListener('DOMContentLoaded', function () {
        // Pobierz pracowników przez AJAX
        fetch('/Employee/GetAllEmployeesJson')
            .then(response => response.json())
            .then(data => {
                if (data.success === false) {
                    console.error('Error:', data.message);
                    return;
                }

                const select = document.getElementById('employeeSelect');
                data.forEach(employee => {
                    const option = document.createElement('option');
                    option.value = employee.Pesel;
                    option.textContent = `${employee.Name} ${employee.Surname} (${employee.Pesel})`;
                    select.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Fetch error:', error);
            });
    });

    document.getElementById('confirmPayment').addEventListener('click', async function () {
        const paymentType = document.getElementById('paymentType').value;
        const employeePesel = document.getElementById('employeeSelect').value;

        if (!paymentType || !employeePesel) {
            alert('Proszę wybrać sposób płatności i pracownika');
            return;
        }

        // Pobieramy dane zamówienia z poprawnym mapowaniem
        const orderItems = getOrderItemsFixed();

        // Pokazujemy szczegółowe dane w konsoli
        console.log("Szczegóły zamówienia:", orderItems);

        const orderData = {
            EmployeePesel: employeePesel,
            CustomerNip: document.getElementById('customerSelect').value || null,
            PaymentType: paymentType,
            Items: orderItems.items,
            RefuelingEntries: orderItems.fuelEntries
        };

        console.log("JSON zamówienia:", JSON.stringify(orderData, null, 2));

        try {
            console.log("Wysyłanie żądania do /Order/Create...");
            const response = await fetch('/Order/Create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(orderData)
            });

            console.log("Otrzymana odpowiedź:", response);
            const result = await response.json();
            console.log("Dane odpowiedzi:", result);

            if (!response.ok) {
                throw new Error(result.message || 'Błąd serwera');
            }

            if (result.success) {
                alert('Zamówienie zostało złożone!');
                bootstrap.Modal.getInstance(document.getElementById('paymentModal')).hide();
                clearReceipt();
            } else {
                throw new Error(result.message || 'Nie udało się złożyć zamówienia');
            }
        } catch (error) {
            console.error('Error:', error);
            alert(`Wystąpił błąd: ${error.message}`);
        }
    });

    // Poprawiona i bardziej szczegółowa funkcja do pobierania danych z paragonu
    function getOrderItemsFixed() {
        const items = [];
        const fuelEntries = [];

        const receiptItems = document.querySelectorAll('#receiptItems .receipt-item');
        console.log("Znaleziono elementów paragonu:", receiptItems.length);

        receiptItems.forEach((item, index) => {
            console.log(`Analizuję element paragonu ${index + 1}:`, item);

            // Sprawdzamy dokładnie atrybuty data-
            console.log("Atrybuty data:", {
                "data-fuel-id": item.getAttribute('data-fuel-id'),
                "dataset.fuelId": item.dataset.fuelId,
                "data-product-id": item.getAttribute('data-product-id'),
                "dataset.productId": item.dataset.productId
            });

            // Sprawdzamy zawartość HTML elementu
            console.log("Zawartość HTML:", item.innerHTML);

            // Pozyskujemy dane z kolumn
            const columns = item.querySelectorAll('span');
            const columnData = Array.from(columns).map(col => col.textContent.trim());
            console.log("Dane kolumn:", columnData);

            // Określamy typ elementu - paliwo czy produkt
            const fuelId = item.dataset.fuelId;
            const productId = item.dataset.productId;

            // Teraz poprawnie odczytujemy dane z kolumn
            const name = columnData[1] || '';
            const quantityText = columnData[2] || '0';
            const priceText = columnData[3] || '0';

            // Konwertujemy liczby
            const quantity = parseFloat(quantityText.replace(/[^\d,.]/g, '').replace(',', '.'));
            const price = parseFloat(priceText.replace(/[^\d,.]/g, '').replace(',', '.'));

            console.log(`Przetworzone dane: nazwa=${name}, ilość=${quantity}, cena=${price}`);

            // Zapisujemy do odpowiedniej kategorii
            if (fuelId) {
                console.log(`Dodaję tankowanie: FuelId=${fuelId}, Amount=${quantity}, Price=${price}`);
                fuelEntries.push({
                    FuelId: parseInt(fuelId),
                    Amount: quantity,
                    PriceAtSale: price
                });
            }
            else if (productId) {
                console.log(`Dodaję produkt: ItemId=${productId}, Quantity=${quantity}`);
                items.push({
                    ItemId: parseInt(productId),
                    Quantity: Math.max(1, Math.round(quantity)),
                    IsFuel: false
                });
            }
            else {
                console.warn("Element nie jest ani produktem, ani tankowaniem!");
            }
        });

        console.log("Końcowy wynik parsowania:", {
            items: items,
            fuelEntries: fuelEntries
        });

        return {
            items: items,
            fuelEntries: fuelEntries
        };
    }

    // Funkcja pomocnicza do czyszczenia paragonu
    function clearReceipt() {
        document.getElementById('receiptItems').innerHTML = '';
        document.getElementById('totalAmount').textContent = '0,00';

        // Odznaczamy przyciski paliw
        document.querySelectorAll('.grid-item-button').forEach(button => {
            button.classList.remove('active-refueling');
        });
    }
</script>

<style>
    .payment-total-amount {
        font-size: 1.5rem;
        font-weight: bold;
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 5px;
        text-align: center;
    }

    #paymentModal .modal-dialog {
        max-width: 600px;
    }

    #paymentModal .modal-body {
        padding: 20px;
    }
</style>