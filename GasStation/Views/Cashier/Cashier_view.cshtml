

@model GasStation.DTO.CreateOrderDTO
@using GasStation.DTO

@{
    ViewBag.Title = "Cashier_view";


    var items = Enumerable.Range(1, 6).Select(i => new RefuelingEntryDTO
    {
        RefuelingEntryId = i,
        Amount = 10.0m + i * 2, // np. ilość zatankowanego paliwa
        OrderId = 100 + i,      // przykładowy ID zamówienia
        FuelId = i,
        FuelName = $"{i}", // zamiast Name
        PriceAtSale = 5.50m + i        // przykładowa cena sprzedaży
    }).ToList();



}
<link href="~/Content/css/kasjer-style.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<!-- Dodaj JS Select2 -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>

<div class="cashier-interface">
    <header class="top-bar">
        <div class="info-left">
            <span>KASA: 1</span>

            <span>KASJER: @(ViewBag.CurrentCashierFullName ?? "Tutaj powinno sie zaladowac imie z ViewBag.CurrentCashierFullName")</span>

        </div>
        <div class="info-center time-display" id="timeDisplay">

            @{

                var currentTime = DateTime.Now;
            }
            @currentTime.ToString("HH:mm") <span class="date-small">@currentTime.ToString("dd/MM/yyyy")</span>
        </div>
        <div class="info-right">
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#changeFuelPriceModal"> Zmień cenę paliwa </button>
            <button class="action-btn" data-bs-toggle="modal" data-bs-target="#addCustomerModal">DODAJ KLIENTA</button>
        </div>
    </header>

    <main class="main-content">

        <section class="left-panel">
            <div class="css-grid-container">

                @foreach (var item in items)
                {

                    <button type="button" class="grid-item-button"
                            data-id="@item.FuelId"
                            data-amount="@item.Amount"
                            data-price="@item.PriceAtSale"
                            data-value="@(item.Amount * item.PriceAtSale)"
                             data-fuel-name="@item.FuelName">

                        <div class="distributor-name">@item.FuelName</div>

                        <div class="item-calculated-value">
                            @((item.Amount * item.PriceAtSale).ToString("N2", new System.Globalization.CultureInfo("pl-PL"))) zł
                        </div>
                        <div class="bottom-details">
                            <span class="amount-display">Ilość: @item.Amount.ToString("N2", System.Globalization.CultureInfo.InvariantCulture) L</span>
                            <span class="price-display">Cena: @item.PriceAtSale.ToString("N2", System.Globalization.CultureInfo.InvariantCulture) zł/L</span>
                        </div>

                        @*<div class="button-content">
                                <div class="distributor-details">
                                    <span class="amount">Ilość: @item.Amount L</span>
                                    <span class="value">Wartość: @(item.Amount * item.PriceAtSale) zł</span>
                                    <span class="price">Cena: @item.PriceAtSale zł/L</span>
                                </div>
                            </div>*@
                    </button>
                }
            </div>

        </section>

        <section class="middle-panel">
            <div class="display-input-area">
                <div class="item-details-preview">
                    <label for="productSelect">Wybierz produkt:</label>
                    <select id="productSelect" class="product-select">
                        <option value="">-- Wyszukaj po kodzie kreskowym --</option>
                        <!-- Produkty będą dodawane tutaj -->
                    </select>
                    <div id="productDetails"></div>
                    <button id="btnAddToOrder" class="action-btn">Dodaj do zamówienia</button>
                    <button id="btnRemoveProduct" class="action-btn">Usuń produkt</button>
                </div>
            </div>
        </section>

        <section class="right-panel">
            <div class="receipt-header">
                <span>Lp.</span>
                <span>Nazwa towaru</span>
                <span>Ilość</span>
                <span>Cena</span>
                <span>Wartość</span>
                <span>&nbsp;</span>
            </div>

            <div id="receiptItems" class="receipt-items-container">
                <!-- Produkty będą tutaj dynamicznie dodawane -->
            </div>

   
          
            <div class="receipt-summary">
                <div>Do zapłaty (PLN): <span id="totalAmount" class="total-amount-value">0.00</span></div>
            </div>

            <div class="payment-options">
                <button class="payment-btn large-btn" id="btnCash">GOTÓWKA</button>
                <button class="payment-btn large-btn" id="btnCard">KARTA</button>
                <button class="payment-btn" id="btnInvoice">FAKTURA</button>
         
            </div>
        </section>
    </main>

    <footer class="bottom-bar">
        <span>F1 POMOC</span>
        <span>F2 PRODUKTY</span>
        <span>F3 PALIWA</span>
        <span>F4 KLIENCI</span>
        <span>...</span>

        <span class="logout-button">
            @* Tworzy link, który po kliknięciu wykona akcję Logout w kontrolerze Home *@
            @Html.ActionLink("Wyloguj", "Logout", "Home", null, new { @class = "btn btn-danger" }) @* Możesz dostosować klasy CSS *@
        </span>
        <div style="text-align: center; margin: 20px;">
            <button id="btnRandomizeRefuelings" class="btn btn-secondary">Losuj Nowe Tankowania</button>
        </div>
    </footer>
</div>
<div class="modal fade" id="addCustomerModal" tabindex="-1" aria-labelledby="addCustomerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <!- Opcjonalnie modal-lg dla szerszego modala ->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addCustomerModalLabel">Dodaj Nowego Klienta</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Zamknij"></button>
            </div>
            <div class="modal-body">
                @* Używamy unikalnego ID dla formularza w modalu *@
                <form id="ajaxAddCustomerForm">
                    @* Renderujemy widok częściowy z formularzem.
                        Przekazujemy nową, pustą instancję CustomerDTO. *@
                    @Html.Partial("~/Views/Customer/_CreateCustomerForm.cshtml", new GasStation.DTO.CustomerDTO())
                </form>
                <div id="addCustomerModalAlertPlaceholder" class="mt-3"></div> @* Miejsce na komunikaty *@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
                <button type="button" class="btn btn-primary" id="btnSaveCustomerAjax">Zapisz Klienta</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        let currentTotal = 0;
        const totalAmount = id('totalAmount');
        const productSelect = id('productSelect');
        const receiptItems = id('receiptItems');
        const timeDisplay = id('timeDisplay');
        const addCustomerModal = id('addCustomerModal');
        const addCustomerForm = id('ajaxAddCustomerForm');
        const customerAlert = id('addCustomerModalAlertPlaceholder');
        const changeFuelModal = id('changeFuelPriceModal');
        const fuelSelectModalDropdown = id('fuelSelect'); // Corrected ID to match HTML
        const newPriceInput = id('priceInput'); // Corrected ID to match HTML
        const priceAlert = id('changePriceModalAlertPlaceholder'); // Need to add this div in your HTML modal
        // const employeeId = dataset(id('currentEmployeeIdentifier'), 'employeeIdentifier'); // This element is not in the provided HTML

        // Placeholder for employeeId, replace with actual logic to get it
        const employeeId = 'UNKNOWN_EMPLOYEE_ID'; // <-- Get this from your application context


        const btns = {
            add: id('btnAddToOrder'),
            remove: id('btnRemoveProduct'),
            randomFuel: id('btnRandomizeRefuelings'),
            saveCustomer: id('btnSaveCustomerAjax'),
            // Assuming you'll add an ID to the save price button in the modal footer
            savePrice: document.querySelector('#changeFuelPriceModal .modal-footer .btn-success'), // Get the Save button in modal
            cash: id('btnCash'),
            card: id('btnCard'),
            invoice: id('btnInvoice')
        };

        const fuelButtons = [...document.querySelectorAll('.grid-item-button')];
        let fuelPrices = {};
        let fuelTypesMap =
        {
            //1: "Benzyna",
            //2: "Diesel",
            // 3: "Gaz"
        }; 
        let products = [];
        let selectedProduct = null;

        // Utility functions
        function id(name) { return document.getElementById(name); }
        function dataset(el, key) { return el && el.dataset[key] || null; }
        function parseNum(str) {
            // Handle comma as decimal separator
            const cleanedStr = str ? str.replace(',', '.') : '0';
            const n = parseFloat(cleanedStr);
            return isNaN(n) ? 0 : n;
        }
        function fmtPLN(n) { return parseFloat(n).toFixed(2).replace('.', ','); } // Ensure n is treated as a number
        function updateTotal() { totalAmount.textContent = fmtPLN(currentTotal); }
        function alertIn(el, msg, type) { if (el) el.innerHTML = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">${msg}<button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>`; }
        function text(parent, sel, t) {
            const e = parent.querySelector(sel);
            if (e) e.textContent = t;
        }
        function updateTime() {
            const now = new Date();
            timeDisplay.innerHTML = now.toLocaleTimeString('pl-PL', { hour: '2-digit', minute: '2-digit' }) +
                ' <span class="date-small">' + now.toLocaleDateString('pl-PL') + '</span>';
        }


        // --- New/Modified functions ---

        // Function to fetch current fuel prices
        function fetchPrices() {
            return fetch('/Fuel/GetCurrentPricesJson') // Assuming this endpoint exists and returns [{ FuelId: ..., Price: ... }, ...]
                .then(r => r.ok ? r.json() : Promise.reject('Failed to fetch prices'))
                .then(data => {
                    fuelPrices = data.reduce((o, { FuelId, Price }) => (o[FuelId] = Price, o), {});
                })
                .catch(err => console.error('Error fetching fuel prices:', err));
        }

        // Function to fetch fuel types (ID and Name)
        // Assuming /Fuel/GetFuelTypesJson returns [{ id: 1, text: "Benzyna" }, ...] for Select2 compatibility
        function fetchFuelTypes() {
            return fetch('/Fuel/GetAllFuelsJson')
                .then(r => r.ok ? r.json() : Promise.reject('Failed to fetch fuel types'))
                .then(data => {
                    // Mapowanie ID na nazwy paliw
                    fuelTypesMap = {
                        1: "Benzyna",
                        2: "Diesel",
                        3: "Gaz"
                    };
                    return data;
                })
                .catch(err => {
                    console.error('Error fetching fuel types:', err);
                    // Domyślne wartości jeśli wystąpi błąd
                    fuelTypesMap = {
                        1: "Benzyna",
                        2: "Diesel",
                        3: "Gaz"
                    };
                    return fuelTypesMap;
                });
        }


        // Function to apply color to a single button based on fuel type
        function applyFuelColorsToButton(button) {
            const fid = parseNum(button.dataset.id);
            const fuelName = fuelTypesMap[fid] || '';

            // Remove all fuel-related classes
            button.classList.forEach(className => {
                if (className.startsWith('fuel-type-')) {
                    button.classList.remove(className);
                }
            });

            // Add appropriate class based on fuel type
            if (fid === 1) { // Benzyna
                button.classList.add('fuel-type-benzyna');
            } else if (fid === 2) { // Diesel
                button.classList.add('fuel-type-diesel');
            } else if (fid === 3) { // Gaz
                button.classList.add('fuel-type-gaz');
            }
        }


        // --- Initialization ---

        // Use Promise.all to ensure both prices and fuel types are loaded before initializing components
        Promise.all([fetchPrices(), fetchFuelTypes()])
            .then(() => {
                // Now that fuelPrices and fuelTypesMap are populated, initialize dependent components
                initFuelButtons(); // This will now apply colors
                initRandomFuel(); // This already works for all buttons and doesn't need color logic inside
                initProducts();
                initCustomerModal();
                initChangeFuelModal(); // This will use the fetched fuel types for Select2
                initPayments();
                initSelect2(); // For product select
                updateTotal(); // Initial total (should be 0 unless items are marked active by default)
            })
            .catch(error => {
                console.error("Failed to initialize cashier:", error);
                // Optionally display a user-friendly error message
            });


        // fetchProducts remains the same
        function fetchProducts() {
            return fetch('/Product/GetAllProductsJson')
                .then(r => r.ok ? r.json() : Promise.reject('Failed to fetch products'))
                .then(data => {
                    products = data;
                    populateProductDropdown();
                })
                .catch(err => console.error('Error fetching products:', err));
        }

        // populateProductDropdown remains the same

        // initFuelButtons now applies colors when buttons are set up
        function initFuelButtons() {
            // Najpierw zastosuj losowanie paliw przy inicjalizacji
            randomizeFuelsOnLoad();

            fuelButtons.forEach(b => {
                b.addEventListener('click', () => {
                    const val = parseNum(b.dataset.value);
                    const isActive = b.classList.contains('active-refueling');

                    b.classList.toggle('active-refueling');

                    if (b.classList.contains('active-refueling') && !isActive) {
                        currentTotal += val;
                    } else if (!b.classList.contains('active-refueling') && isActive) {
                        currentTotal -= val;
                    }
                    updateTotal();
                });
            });
        }

        function randomizeFuelsOnLoad() {
            fuelButtons.forEach((b, index) => {
                const randomFuelId = Math.floor(Math.random() * 3) + 1;
                const fuelName = fuelTypesMap[randomFuelId]; // Teraz używa pełnej nazwy

                // Reszta funkcji pozostaje bez zmian...
                const price = fuelPrices[randomFuelId] || 5.50;
                const amount = (Math.random() * 39 + 1).toFixed(2);
                const value = parseFloat(amount) * price;

                b.dataset.id = randomFuelId;
                b.dataset.fuelName = fuelName;
                b.dataset.amount = amount;
                b.dataset.price = price.toFixed(2);
                b.dataset.value = value.toFixed(2);

                // Tutaj zmiana - wyświetlamy pełną nazwę paliwa
                text(b, '.distributor-name', fuelName);
                text(b, '.amount-display', `Ilość: ${amount.replace('.', ',')} L`);
                text(b, '.price-display', `Cena: ${fmtPLN(price)} zł/L`);
                text(b, '.item-calculated-value', `${fmtPLN(value)} zł`);

                applyFuelColorsToButton(b);
            });
        }
        

        // initRandomFuel remains largely the same, removes active state and recalculates values
        // It doesn't need to re-apply colors because the fuel type doesn't change, only the amount/value.
        // The colors are applied once during initFuelButtons based on the FuelId.
 
        function initRandomFuel() {
            if (!btns.randomFuel) return;
            btns.randomFuel.addEventListener('click', () => {
                fuelButtons.forEach(b => {
                    if (b.classList.contains('active-refueling')) {
                        currentTotal -= parseNum(b.dataset.value);
                        b.classList.remove('active-refueling');
                    }
                });

                fuelButtons.forEach((b, index) => {
                    const randomFuelId = Math.floor(Math.random() * 3) + 1;
                    const fuelName = fuelTypesMap[randomFuelId]; // Pełna nazwa paliwa

                    // Reszta kodu pozostaje bez zmian...
                    const price = fuelPrices[randomFuelId];
                    if (!price) {
                        console.error(`Brak ceny dla paliwa ID: ${randomFuelId}`);
                        return;
                    }

                    const amount = (Math.random() * 39 + 1).toFixed(2);
                    const value = parseFloat(amount) * price;

                    b.dataset.id = randomFuelId;
                    b.dataset.fuelName = fuelName;
                    b.dataset.amount = amount;
                    b.dataset.price = price.toFixed(2);
                    b.dataset.value = value.toFixed(2);

                    // Wyświetl pełną nazwę paliwa
                    text(b, '.distributor-name', fuelName);
                    text(b, '.amount-display', `Ilość: ${amount.replace('.', ',')} L`);
                    text(b, '.price-display', `Cena: ${fmtPLN(price)} zł/L`);
                    text(b, '.item-calculated-value', `${fmtPLN(value)} zł`);

                    applyFuelColorsToButton(b);
                });

                updateTotal();
            });
        }

        // initProducts remains the same

        // initCustomerModal remains the same

        // initChangeFuelModal modified to use the pre-fetched fuelTypesMap for Select2
        function initChangeFuelModal() {
            changeFuelModal && changeFuelModal.addEventListener('shown.bs.modal', () => {
                const fuelSelectDropdown = id('fuelSelect'); // Use the correct ID
                if (fuelSelectDropdown && window.$) {
                    // Prepare data for Select2 from the fetched fuelTypesMap
                    const select2Data = Object.keys(fuelTypesMap).map(id => ({ id: id, text: fuelTypesMap[id] }));

                    $(fuelSelectDropdown).select2({
                        placeholder: '-- Wybierz paliwo --',
                        allowClear: true,
                        dropdownParent: $(changeFuelModal),
                        data: select2Data // Use pre-fetched data
                    });

                    // Enable the save button if fuel and price inputs are valid
                    const updateSaveButtonState = () => {
                        const selectedFuelId = $(fuelSelectDropdown).val();
                        const newPrice = parseNum(newPriceInput.value);
                        if (btns.savePrice) {
                            btns.savePrice.disabled = !selectedFuelId || newPrice <= 0;
                        }
                    };

                    // Add event listeners to update the save button state
                    $(fuelSelectDropdown).on('change', updateSaveButtonState);
                    newPriceInput.addEventListener('input', updateSaveButtonState);
                    // Initial state check
                    updateSaveButtonState();
                }
            });

            // Add event listener for the save button click
            btns.savePrice && btns.savePrice.addEventListener('click', () => {
                const fid = window.$ ? $('#fuelSelect').val() : null; // Use the correct ID
                const pr = parseNum(newPriceInput.value);
                // Assuming employeeId is correctly obtained elsewhere
                // const employeeId = dataset(id('currentEmployeeIdentifier'), 'employeeIdentifier');
                // Using the placeholder employeeId defined earlier
                const currentEmployeeId = employeeId;

                if (!fid || pr <= 0 || !currentEmployeeId) {
                    alertIn(priceAlert, 'Błąd danych (wybierz paliwo, podaj cenę i upewnij się, że ID pracownika jest dostępne).', 'warning');
                    return;
                }

                const data = { FuelId: +fid, Price: pr, EmployeePesel: currentEmployeeId };

                fetch('/Fuel/UpdatePrice', { // Assuming this endpoint exists and handles price updates
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(data)
                })
                    .then(r => r.ok ? r.json() : Promise.reject('Failed to update price'))
                    .then(res => {
                        if (res.success) {
                            alertIn(priceAlert, res.message || 'Zapisano', 'success');
                            // Refresh prices and close modal after successful update
                            fetchPrices().then(() => {
                                // After prices are refreshed, re-apply colors in case price changes affect perception (optional)
                                // applyFuelColors(); // Not needed if colors are based on type, not price.
                                // If you want to update the displayed prices on the buttons immediately, you'd need to iterate fuelButtons here.
                                fuelButtons.forEach(b => {
                                    const fid = parseNum(b.dataset.id);
                                    const newPrice = fuelPrices[fid] || 0;
                                    const currentAmount = parseNum(b.dataset.amount);
                                    const newValue = currentAmount * newPrice;

                                    b.dataset.price = newPrice.toFixed(2);
                                    b.dataset.value = newValue.toFixed(2);

                                    text(b, '.price-display', `Cena: ${fmtPLN(newPrice)} zł/L`);
                                    text(b, '.item-calculated-value', `${fmtPLN(newValue)} zł`);
                                });
                                // Recalculate total in case any active items had their price changed
                                currentTotal = fuelButtons.reduce((sum, b) => {
                                    if (b.classList.contains('active-refueling')) {
                                        return sum + parseNum(b.dataset.value);
                                    }
                                    return sum;
                                }, 0);
                                updateTotal();

                            }).catch(err => console.error('Error refreshing prices after update:', err));

                            setTimeout(() => {
                                bootstrap.Modal.getInstance(changeFuelModal).hide();
                                // Reset modal form if needed
                            }, 1500);
                        } else {
                            alertIn(priceAlert, res.message || 'Błąd', 'danger');
                        }
                    }).catch(err => alertIn(priceAlert, 'Błąd AJAX: ' + err, 'danger'));
            });


            changeFuelModal && changeFuelModal.addEventListener('hidden.bs.modal', () => {
                priceAlert.innerHTML = ''; // Clear alerts on modal close
                const fuelSelectDropdown = id('fuelSelect');
                const newPriceInput = id('priceInput');
                if (fuelSelectDropdown && window.$) $(fuelSelectDropdown).val(null).trigger('change'); // Clear select2
                if (newPriceInput) newPriceInput.value = ''; // Clear price input
                if (btns.savePrice) btns.savePrice.disabled = true; // Disable save button
            });

        }


        // initPayments remains the same

        // initSelect2 remains the same (for product select)

        // updateTime remains the same

        // Ensure priceAlert placeholder exists in the HTML modal
        // Add <div id="changePriceModalAlertPlaceholder" class="mt-3"></div> inside the modal body
        // e.g., right before the </form> tag or after the form.


    });
</script>
    }}

<div class="modal fade" id="changeFuelPriceModal" tabindex="-1" aria-labelledby="changeFuelPriceModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="changeFuelPriceModalLabel">Zmień cenę paliwa</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Zamknij"></button>
            </div>

            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label for="fuelSelect" class="form-label">Wybierz paliwo</label>
                        <select id="fuelSelect" class="form-select">
                            <option selected disabled>-- wybierz paliwo --</option>
                            <option>Benzyna </option>
                            <option>Diesel (ON) </option>
                            <option>Gaz (LPG) </option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="priceInput" class="form-label">Nowa cena (zł)</label>
                        <input type="number" class="form-control" id="priceInput" placeholder="np. 6.45" step="0.01" min="0">
                    </div>

                    <div class="mb-3">
                        <label for="dateFromInput" class="form-label">Data od kiedy obowiązuje</label>
                        <input type="datetime-local" class="form-control" id="dateFromInput">
                    </div>

                    <div class="mb-3">
                        <label for="dateToInput" class="form-label">Data do kiedy obowiązuje (opcjonalnie)</label>
                        <input type="datetime-local" class="form-control" id="dateToInput">
                    </div>
                </form>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
                <button type="button" class="btn btn-success" disabled>Zapisz zmianę</button>
            </div>

        </div>
    </div>
</div>
<style>
   
    :root {
        --primary-color: #007bff;
        --primary-color-darken10: #0069d9; /* Trochę ciemniejszy primary */

        --secondary-color: #6c757d;
        --secondary-color-darken10: #545b62; /* Trochę ciemniejszy secondary */

        --success-color: #28a745;
        --success-color-darken10: #218838; /* Trochę ciemniejszy success */

        --info-color: #17a2b8;
        --info-color-lighten30: #5bc0de; /* Trochę jaśniejszy info */

        --warning-color: #ffc107;
        --danger-color: #dc3545;
        --dark-color: #343a40;
        --dark-color-darken10: #1d2124; /* Trochę ciemniejszy dark */

        --light-color: #f8f9fa;
        --white-color: #fff;
        --border-color: #ced4da;
        --text-color: #212529;
        --text-light: #f8f9fa;
        --spacing-unit: 1rem;
    }

    body {
        font-family: 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        line-height: 1.6;
        color: var(--text-color);
        background-color: var(--light-color);
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: column;
        min-height: 100vh; /* Ustawia minimalną wysokość na 100% widocznej części okna */
    }

    /* Główny kontener interfejsu kasjera */
    .cashier-interface {
        display: flex;
        flex-direction: column;
        flex-grow: 1; /* Pozwala main-content na rozciąganie */
        width: 100%;
        max-width: 1900px; /* Ogranicz maksymalną szerokość */
        margin: 0 auto; /* Wyśrodkuj kontener */
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); /* Subtelny cień */
        background-color: var(--white-color);
    }

    /* Górny pasek (nagłówek) */
    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: var(--spacing-unit);
        background-color: var(--dark-color);
        color: var(--text-light);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .top-bar .info-left span,
        .top-bar .info-center span,
        .top-bar .info-right .btn {
            margin-right: var(--spacing-unit);
        }

    .time-display {
        font-size: 1.2em;
        font-weight: bold;
    }

    .date-small {
        font-size: 0.8em;
        opacity: 0.8;
    }

    .action-btn { /* Przyciski akcji w nagłówku */
        background-color: var(--primary-color);
        color: var(--white-color);
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 0.25rem;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .action-btn:hover {
            background-color: darken(var(--primary-color), 10%); /* Przyciemnij przy najechaniu (przykład, wymaga preprocesora lub innego sposobu) */
            opacity: 0.9; /* Alternatywnie zmień przezroczystość */
        }

    /* Style dla przycisku "Zmień cenę paliwa" z Bootstrapa */
    .top-bar .btn-primary {
        margin-right: var(--spacing-unit);
    }


    /* Główna zawartość (panele) */
    .main-content {
        display: flex;
        flex-grow: 1;
        padding: var(--spacing-unit);
        gap: var(--spacing-unit); /* Odstęp między panelami */
    }

    /* Panele - wspólne style */
    .left-panel,
    .middle-panel,
    .right-panel {
        padding: var(--spacing-unit);
        border: 1px solid var(--border-color);
        border-radius: 0.25rem;
        background-color: var(--white-color);
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05); /* Subtelny wewnętrzny cień */
        overflow-y: auto; /* Dodaj scroll, jesli zawartosc bedzie wieksza */
    }

    .left-panel {
        flex: 1.5; /* Proporcja szerokości */
        min-width: 250px; /* Minimalna szerokość, aby uniknąć zgniecenia */
    }

    .middle-panel {
        flex: 1; /* Proporcja szerokości */
        min-width: 200px;
        display: flex;
        flex-direction: column;
        gap: var(--spacing-unit);
    }

    .right-panel {
        flex: 2; /* Proporcja szerokości */
        min-width: 300px;
        display: flex;
        flex-direction: column;
    }

    .fuel-type-benzyna {
        background-color: #ffcc00; /* Yellow for Benzyna */
        color: #333;
    }

    .fuel-type-diesel {
        background-color: #6699cc; /* Blue for Diesel */
        color: #fff;
    }

    .fuel-type-gaz {
        background-color: #99cc66; /* Green for Gaz */
        color: #333;
    }

    .grid-item-button.active-refueling {
        border: 3px solid blue;
        box-shadow: 0 0 8px rgba(0, 0, 255, 0.5);
    }

    /* Grid dla przycisków dystrybutorów */
    .css-grid-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); /* Automatycznie dopasowuje kolumny, min 150px szerokosci */
        gap: var(--spacing-unit);
        padding: 0; /* Usun padding, bo panel ma juz padding */
        border: none; /* Usun ramke, bo panel ma juz ramke */
    }

    /* Styl przycisku dystrybutora */
    .grid-item-button {
        /* ... (istniejące style) ... */
        border: 1px solid var(--border-color);
        border-radius: 0.25rem;
        transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease, transform 0.3s ease;
    }

        /* *** Style kolorów tła i ramki w zależności od data-fuelid *** */

        .grid-item-button.fuel-type-benzyna {
            background-color: #ffcc00; /* Example color for Gasoline */
            color: #333; /* Adjust text color for readability */
        }

        .grid-item-button.fuel-type-diesel-on {
            background-color: #6699cc; /* Example color for Diesel */
            color: #fff; /* Adjust text color for readability */
        }

        .grid-item-button.fuel-type-gaz-lpg {
            background-color: #99cc66; /* Example color for LPG */
            color: #333; /* Adjust text color for readability */
        }

        /* Add styles for other fuel IDs/names as needed */
        .grid-item-button.fuel-type-1 { /* Fallback or if names aren't used in classes */
            background-color: #ffcc00;
        }

        .grid-item-button.fuel-type-2 {
            background-color: #6699cc;
        }

        .grid-item-button.fuel-type-3 {
            background-color: #99cc66;
        }

        .grid-item-button.fuel-type-4 {
            background-color: #cc99cc; /* Example color */
        }

        .grid-item-button.fuel-type-5 {
            background-color: #ff6666; /* Example color */
        }

        .grid-item-button.fuel-type-6 {
            background-color: #a0a0a0; /* Example color */
        }


        /* Optional: style for active state */
        .grid-item-button.active-refueling {
            border: 3px solid blue; /* Example active style */
            box-shadow: 0 0 8px rgba(0, 0, 255, 0.5); /* Optional shadow */
        }


    /* Style dla div wyświetlającego wybranego klienta w modalu wyboru klienta */
    #selectedCustomerDetails.alert-info {
        /* *** Zmieniono: background-color używa nowej zmiennej *** */
        background-color: var(--info-color-lighten30);
        border-color: var(--info-color);
        color: var(--dark-color);
    }

    #selectedCustomerDetails h4 {
        color: var(--dark-color);
    }


    /* Style elementów wewnątrz przycisku */
    .distributor-name {
        font-size: 1.1em;
        font-weight: bold;
        margin-bottom: 0.5em; /* Odstęp pod nazwą */
        /* Kolor tekstu ustawiany w regułach data-fuelid */
        text-shadow: 1px 1px 2px rgba(0,0,0,0.3); /* Subtelny cień */
    }

    .item-calculated-value {
        font-size: 1.8em;
        font-weight: bold;
        margin: auto 0; /* Wyśrodkuj pionowo */
        /* Kolor tekstu ustawiany w regułach data-fuelid */
        text-shadow: 1px 1px 3px rgba(0,0,0,0.5);
    }

    .bottom-details {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        font-size: 0.9em;
        margin-top: 0.5em; /* Odstęp nad szczegółami */
        /* Kolor tekstu ustawiany w regułach data-fuelid */
    }

        .bottom-details .amount-display,
        .bottom-details .price-display {
            flex-basis: 50%;
            padding: 0 5px;
            box-sizing: border-box;
            /* Kolor tekstu ustawiany w regułach data-fuelid */
        }

        .bottom-details .amount-display {
            text-align: left;
        }

        .bottom-details .price-display {
            text-align: right;
        }


    /* Style dla sekcji Produktów (middle-panel) */
    .display-input-area {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-unit);
    }

    .item-details-preview {
        padding: var(--spacing-unit);
        border: 1px dashed var(--border-color);
        border-radius: 0.25rem;
        background-color: var(--light-color);
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    #productDetails h3 {
        margin-top: 0;
        margin-bottom: 0.5rem;
        font-size: 1.2em;
        color: var(--primary-color);
    }

    #productDetails p {
        margin: 0 0 0.3rem 0;
        font-size: 0.9em;
    }

    /* Style dla przycisków "Dodaj do zamówienia", "Usuń produkt" */
    .middle-panel .action-btn {
        width: 100%;
        margin-top: 0.5rem;
        padding: 0.75rem;
        font-size: 1em;
    }


    /* Style dla Sekcji Paragonu (right-panel) */
    .receipt-header {
        display: grid;
        grid-template-columns: 0.5fr 3fr 1fr 1.2fr 1.2fr 0.5fr; /* Dostosuj szerokości kolumn */
        gap: 5px;
        padding: 10px;
        font-weight: bold;
        border-bottom: 1px solid var(--dark-color);
        margin-bottom: 5px;
        color: var(--dark-color);
    }

    .receipt-items-container {
        flex-grow: 1; /* Pozwala na rozciąganie listy pozycji */
        overflow-y: auto; /* Dodaje scroll, jesli lista jest dluga */
        padding-right: 5px; /* Dodatkowy padding, aby scrollbar nie zasłaniał treści */
    }

    .receipt-item {
        display: grid;
        grid-template-columns: 0.5fr 3fr 1fr 1.2fr 1.2fr 0.5fr; /* Dopasuj do nagłówka */
        gap: 5px;
        padding: 8px 10px;
        border-bottom: 1px dashed var(--border-color);
        align-items: center;
        font-size: 0.95em;
    }

        .receipt-item span {
            overflow: hidden;
            text-overflow: ellipsis; /* Dodaje ... jesli tekst jest za dlugi */
            white-space: nowrap; /* Zapobiega zawijaniu tekstu */
        }

    .receipt-summary {
        margin-top: 10px;
        padding: 10px;
        border-top: 2px solid var(--dark-color);
        font-size: 1.4em;
        font-weight: bold;
        text-align: right;
        color: var(--dark-color);
    }

    .total-amount-value {
        color: var(--success-color); /* Kolor dla kwoty do zapłaty */
    }

    /* Opcje płatności */
    .payment-options {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); /* Dopasuj do dostępnej szerokości */
        gap: var(--spacing-unit);
        margin-top: var(--spacing-unit);
    }

    .payment-btn {
        padding: 1rem;
        font-size: 1.1em;
        font-weight: bold;
        border: none;
        border-radius: 0.25rem;
        cursor: pointer;
        transition: background-color 0.2s ease, opacity 0.2s ease;
        color: var(--white-color);
        background-color: var(--primary-color); /* Domyślny kolor */
    }

        .payment-btn.large-btn {
            grid-column: span 1; /* Domyślnie zajmuje jedną kolumnę w siatce */
            /* Możesz dodać media query, aby zajmowały więcej kolumn na mniejszych ekranach */
        }

    #btnCash {
        background-color: var(--success-color);
    }
    /* Zielony dla GOTÓWKA */
    #btnCard {
        background-color: var(--info-color);
    }
    /* Błękitny dla KARTA */
    #btnInvoice {
        background-color: var(--secondary-color);
    }
    /* Szary dla FAKTURA */


    .payment-btn:hover {
        opacity: 0.9;
    }


    /* Dolny pasek (stopka) */
    .bottom-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: var(--spacing-unit);
        background-color: var(--dark-color);
        color: var(--text-light);
        box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.1);
        font-size: 0.9em;
    }

    .logout-button .btn-danger { /* Styl przycisku Wyloguj (z Bootstrapa) */
        padding: 0.5rem 1rem;
    }

    /* Styl dla przycisku "Losuj Nowe Tankowania" */
    #btnRandomizeRefuelings {
        margin-bottom: var(--spacing-unit);
    }


    /* Style specyficzne dla Modali */
    /* Bootstrap domyślnie styluje modale, ale możesz dodać własne poprawki */
    .modal-content {
        border-radius: 0.5rem;
    }

    .modal-header {
        border-bottom: 1px solid var(--border-color);
    }

    .modal-footer {
        border-top: 1px solid var(--border-color);
    }

    /* Poprawka dla Select2 w modalu (jeśli nadal używasz Select2 dla produktów) */
    .modal .select2-container {
        width: 100% !important; /* Wymuś pełną szerokość w modalu */
    }

    /* Styl dla listy wyników wyszukiwania klientów bez Select2 */
    #customerSearchResults.list-group-item {
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        #customerSearchResults.list-group-item:hover {
            background-color: var(--light-color);
        }

    /* Styl dla div wyświetlającego wybranego klienta w modalu wyboru klienta */
    #selectedCustomerDetails.alert-info {
        background-color: lighten(var(--info-color), 30%);
        border-color: var(--info-color);
        color: var(--dark-color);
    }

    #selectedCustomerDetails h4 {
        color: var(--dark-color);
    }
</style>
