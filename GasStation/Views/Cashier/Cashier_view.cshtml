

@model GasStation.DTO.CreateOrderDTO
@using GasStation.DTO

@{
    ViewBag.Title = "Cashier_view";


    var items = Enumerable.Range(1, 6).Select(i => new RefuelingEntryDTO
    {
        RefuelingEntryId = i,
        Amount = 10.0m + i * 2, // np. ilość zatankowanego paliwa
        OrderId = 100 + i,      // przykładowy ID zamówienia
        FuelId = i,
        FuelName = $"{i}", // zamiast Name
        PriceAtSale = 5.50m + i        // przykładowa cena sprzedaży
    }).ToList();
}
<link href="~/Content/css/kasjer-style.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<!-- Dodaj JS Select2 -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>

<div class="cashier-interface">
    <header class="top-bar">
        <div class="info-left">
            <span>KASA: 1</span>

            <span>KASJER: @(ViewBag.CurrentCashierFullName ?? "Tutaj powinno sie zaladowac imie z ViewBag.CurrentCashierFullName")</span>

        </div>
        <div class="info-center time-display" id="timeDisplay">

            @{

                var currentTime = DateTime.Now;
            }
            @currentTime.ToString("HH:mm") <span class="date-small">@currentTime.ToString("dd/MM/yyyy")</span>
        </div>
        <div class="info-right">
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#changeFuelPriceModal"> Zmień cenę paliwa </button>
            <button class="action-btn" data-bs-toggle="modal" data-bs-target="#addCustomerModal">DODAJ KLIENTA</button>
        </div>
    </header>

    <main class="main-content">

        <section class="left-panel">
            <div class="css-grid-container">

                @foreach (var item in items)
                {

                    <button type="button" class="grid-item-button"
                            data-id="@item.FuelId"
                            data-amount="@item.Amount"
                            data-price="@item.PriceAtSale"
                            data-value="@(item.Amount * item.PriceAtSale)">

                        <div class="distributor-name">@item.FuelName</div>

                        <div class="item-calculated-value">
                            @((item.Amount * item.PriceAtSale).ToString("N2", new System.Globalization.CultureInfo("pl-PL"))) zł
                        </div>
                        <div class="bottom-details">
                            <span class="amount-display">Ilość: @item.Amount.ToString("N2", System.Globalization.CultureInfo.InvariantCulture) L</span>
                            <span class="price-display">Cena: @item.PriceAtSale.ToString("N2", System.Globalization.CultureInfo.InvariantCulture) zł/L</span>
                        </div>

                        @*<div class="button-content">
                                <div class="distributor-details">
                                    <span class="amount">Ilość: @item.Amount L</span>
                                    <span class="value">Wartość: @(item.Amount * item.PriceAtSale) zł</span>
                                    <span class="price">Cena: @item.PriceAtSale zł/L</span>
                                </div>
                            </div>*@
                    </button>
                }
            </div>

        </section>

        <section class="middle-panel">
            <div class="display-input-area">
                <div class="item-details-preview">
                    <label for="productSelect">Wybierz produkt:</label>
                    <select id="productSelect" class="product-select">
                        <option value="">-- Wyszukaj po kodzie kreskowym --</option>
                        <!-- Produkty będą dodawane tutaj -->
                    </select>
                    <div id="productDetails"></div>
                    <button id="btnAddToOrder" class="action-btn">Dodaj do zamówienia</button>
                    <button id="btnRemoveProduct" class="action-btn">Usuń produkt</button>
                </div>
            </div>
        </section>

        <section class="right-panel">
            <div class="receipt-header">
                <span>Lp.</span>
                <span>Nazwa towaru</span>
                <span>Ilość</span>
                <span>Cena</span>
                <span>Wartość</span>
                <span>&nbsp;</span>
            </div>

            <div id="receiptItems" class="receipt-items-container">
                <!-- Produkty będą tutaj dynamicznie dodawane -->
            </div>

            <!-- Formularz do dodawania produktów -->
            <div class="add-product-form">
                <input type="text" id="productName" placeholder="Nazwa towaru" />
                <input type="number" id="productQuantity" placeholder="Ilość" />
                <input type="number" step="0.01" id="productPrice" placeholder="Cena" />
                <button id="addProductBtn">Dodaj</button>
            </div>

            <div class="receipt-summary">
                <div>Do zapłaty (PLN): <span id="totalAmount" class="total-amount-value">0.00</span></div>
            </div>

            <div class="payment-options">
                <button class="payment-btn large-btn" id="btnCash">GOTÓWKA</button>
                <button class="payment-btn large-btn" id="btnCard">KARTA</button>
                <button class="payment-btn" id="btnInvoice">FAKTURA</button>
                <button class="action-btn" id="btnFueling">DYSTRYBUTORY</button>
              
                <button class="action-btn" id="btnVoidItem">WYCOFAJ POZ.</button>
            </div>
        </section>
    </main>

    <footer class="bottom-bar">
        <span>F1 POMOC</span>
        <span>F2 PRODUKTY</span>
        <span>F3 PALIWA</span>
        <span>F4 KLIENCI</span>
        <span>...</span>
       
        <span class="logout-button">
            @* Tworzy link, który po kliknięciu wykona akcję Logout w kontrolerze Home *@
            @Html.ActionLink("Wyloguj", "Logout", "Home", null, new { @class = "btn btn-danger" }) @* Możesz dostosować klasy CSS *@
        </span>
    </footer>
</div>
<div class="modal fade" id="addCustomerModal" tabindex="-1" aria-labelledby="addCustomerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <!- Opcjonalnie modal-lg dla szerszego modala ->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addCustomerModalLabel">Dodaj Nowego Klienta</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Zamknij"></button>
            </div>
            <div class="modal-body">
                @* Używamy unikalnego ID dla formularza w modalu *@
                <form id="ajaxAddCustomerForm">
                    @* Renderujemy widok częściowy z formularzem.
                        Przekazujemy nową, pustą instancję CustomerDTO. *@
                    @Html.Partial("~/Views/Customer/_CreateCustomerForm.cshtml", new GasStation.DTO.CustomerDTO())
                </form>
                <div id="addCustomerModalAlertPlaceholder" class="mt-3"></div> @* Miejsce na komunikaty *@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
                <button type="button" class="btn btn-primary" id="btnSaveCustomerAjax">Zapisz Klienta</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Pobieramy element, który wyświetla sumę
            const totalAmountSpan = document.getElementById('totalAmount');

            // Funkcja do parsowania wartości z tekstu
            function parseAmount(str) {
                return parseFloat(str.replace(',', '.'));
            }

            // Funkcja do formatowania wartości w polskim formacie waluty
            function formatPLN(amount) {
                return amount.toFixed(2).replace('.', ',');
            }

            // Pobieramy początkową wartość z elementu, na którym jest wyświetlana suma
            let currentTotal = parseAmount(totalAmountSpan.textContent.trim());

            // Jeśli odczytana wartość jest nieprawidłowa, ustawiamy ją na 0
            if (isNaN(currentTotal)) currentTotal = 0;

            // Znajdź wszystkie przyciski z klasą 'grid-item-button'
            const buttons = document.querySelectorAll('.grid-item-button');

            buttons.forEach(button => {
                // Dodajemy nasłuchiwanie na kliknięcie przycisku
                button.addEventListener('click', function () {
                    // Odczytujemy wartość przycisku
                    const valueStr = this.dataset.value;
                    const value = parseFloat(valueStr);

                    // Jeśli wartość jest poprawna
                    if (!isNaN(value)) {
                        // Sprawdzamy, czy przycisk został już kliknięty (ma klasę 'clicked')
                        const isClicked = this.classList.contains('clicked');

                        if (isClicked) {
                            // Jeśli przycisk był wcześniej kliknięty, odejmujemy wartość
                            currentTotal -= value;

                            // Usuwamy klasę 'clicked', bo przycisk zostanie kliknięty ponownie
                            this.classList.remove('clicked');
                        } else {
                            // Jeśli przycisk nie był wcześniej kliknięty, dodajemy wartość
                            currentTotal += value;

                            // Dodajemy klasę 'clicked', bo przycisk został kliknięty
                            this.classList.add('clicked');
                        }

                        // Aktualizujemy wyświetlaną wartość na stronie
                        totalAmountSpan.textContent = formatPLN(currentTotal);
                    } else {
                        console.error("Nieprawidłowa wartość:", valueStr);
                    }
                });
            });
        });

         const addCustomerModalElement = document.getElementById('addCustomerModal');
            const addCustomerForm = document.getElementById('ajaxAddCustomerForm');
            const btnSaveCustomerAjax = document.getElementById('btnSaveCustomerAjax');
            const alertPlaceholder = document.getElementById('addCustomerModalAlertPlaceholder');

            function showAlert(message, type = 'success') {
                alertPlaceholder.innerHTML = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">
                                                ${message}
                                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                            </div>`;
            }

            function clearFormAndAlerts() {
                addCustomerForm.reset(); // Czyści pola formularza
                // Usuwa komunikaty walidacyjne dodane przez jQuery Unobtrusive Validation (jeśli używane)
                const validationMessages = addCustomerForm.querySelectorAll('.field-validation-error span');
                validationMessages.forEach(span => span.textContent = ''); // lub span.remove()
                const validationSummary = addCustomerForm.querySelector('#customerFormValidationSummary ul');
                if(validationSummary) validationSummary.innerHTML = '';

                alertPlaceholder.innerHTML = ''; // Czyści komunikaty z showAlert
            }

            if (btnSaveCustomerAjax) {
                btnSaveCustomerAjax.addEventListener('click', function () {
                    // Prosta walidacja po stronie klienta (można rozbudować lub polegać na serwerowej)
                    // Dla pełnej walidacji po stronie klienta z DataAnnotations potrzebujesz jQuery Unobtrusive Validation
                    // i wywołania $(addCustomerForm).validate().form() lub podobnego.

                    const formData = new FormData(addCustomerForm);

                    // Dla uproszczenia użyję fetch API. Jeśli masz jQuery, możesz użyć $.ajax.
                    fetch('@Url.Action("Create", "Customer")', { // Generuje poprawny URL do akcji
                        method: 'POST',
                        body: formData,
                        headers: {
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                            // FormData automatycznie ustawia Content-Type na multipart/form-data
                            // 'RequestVerificationToken': formData.get('__RequestVerificationToken') // Potrzebne jeśli nie wysyłasz jako FormData lub serwer tego oczekuje w nagłówku
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showAlert(data.message || 'Klient dodany pomyślnie!', 'success');
                            addCustomerForm.reset(); // Wyczyść formularz
                            // Opcjonalnie zamknij modal po chwili
                            setTimeout(() => {
                                const modalInstance = bootstrap.Modal.getInstance(addCustomerModalElement);
                                if (modalInstance) {
                                    modalInstance.hide();
                                }
                                clearFormAndAlerts(); // Czyścimy też przy zamykaniu
                            }, 2000);
                            // Tutaj możesz dodać logikę odświeżenia listy klientów, jeśli jest taka potrzeba
                        } else {
                            alertPlaceholder.innerHTML = ''; // Wyczyść poprzednie komunikaty
                            if (data.isValidationError && Array.isArray(data.errors)) {
                                let errorHtml = '<ul class="list-unstyled text-danger">';
                                data.errors.forEach(fieldError => {
                                    // fieldError to obiekt { Key: "NazwaPola", Value: ["Błąd1", "Błąd2"] }
                                    fieldError.Value.forEach(errMsg => {
                                        errorHtml += `<li>${fieldError.Key}: ${errMsg}</li>`;
                                        // Można też próbować znaleźć pole i dodać błąd obok niego
                                        const inputField = addCustomerForm.querySelector(`[name="${fieldError.Key}"]`);
                                        let validationSpan = inputField ? inputField.nextElementSibling : null;
                                        if (validationSpan && validationSpan.classList.contains('text-danger')) {
                                            validationSpan.textContent = errMsg;
                                        }
                                    });
                                });
                                errorHtml += '</ul>';
                                showAlert('Proszę poprawić następujące błędy:<br>' + errorHtml, 'danger');
                            } else if (Array.isArray(data.errors)) {
                                showAlert(data.errors.join('<br>'), 'danger');
                            } else {
                                showAlert(data.message || 'Wystąpił nieoczekiwany błąd.', 'danger');
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Błąd AJAX:', error);
                        showAlert('Błąd połączenia z serwerem.', 'danger');
                    });
                });
            }

            // Czyść formularz i komunikaty przy zamykaniu modala
            if (addCustomerModalElement) {
                addCustomerModalElement.addEventListener('hidden.bs.modal', function () {
                    clearFormAndAlerts();
                });
            }
        




        document.addEventListener('DOMContentLoaded', function () {
            // Lista produktów (w przyszłości może pochodzić z bazy danych)
            const products = [
                { id: 1, name: 'Myjnia Program 1', barcode: '123456789', price: 12.00 },
                { id: 2, name: 'HOT-DOG Amerykański', barcode: '987654321', price: 7.50 },
                { id: 3, name: 'Kawa Espresso', barcode: '456123789', price: 5.00 },
                { id: 4, name: 'Frytki Ziemniaczane', barcode: '321654987', price: 3.50 }
            ];

            const productSelect = document.getElementById('productSelect');
            const btnAddToOrder = document.getElementById('btnAddToOrder');
            const btnRemoveProduct = document.getElementById('btnRemoveProduct');
            const productDetails = document.getElementById('productDetails');
            const totalAmount = document.getElementById('totalAmount');

            let selectedProduct = null; // Zmienna przechowująca wybrany produkt
            let currentTotal = 0; // Zmienna przechowująca całkowitą sumę zamówienia

            // Funkcja do dodawania produktów do rozwijanej listy
            function populateProductSelect(products) {
                productSelect.innerHTML = '<option value="">-- Wyszukaj po kodzie kreskowym --</option>'; // Resetowanie listy
                products.forEach(product => {
                    const option = document.createElement('option');
                    option.value = product.barcode;
                    option.textContent = `${product.name} (Kod: ${product.barcode})`;
                    productSelect.appendChild(option);
                });
            }

            // Inicjalizacja rozwijanej listy z produktami
            populateProductSelect(products);

            // Funkcja do wyświetlania szczegółów produktu
            function displayProductDetails(product) {
                productDetails.innerHTML = `
                        <h3>Produkt: ${product.name}</h3>
                        <p><strong>Kod kreskowy:</strong> ${product.barcode}</p>
                        <p><strong>Cena:</strong> ${product.price} PLN</p>
                    `;
            }

            // Funkcja do czyszczenia szczegółów produktu
            function clearProductDetails() {
                productDetails.innerHTML = '';
            }

            // Funkcja do aktualizacji sumy zamówienia
            function updateTotalAmount() {
                totalAmount.textContent = currentTotal.toFixed(2); // Aktualizuje tekst w elemencie totalAmount
            }

            // Obsługa zmiany w wyszukiwarce
            productSelect.addEventListener('change', function () {
                const selectedBarcode = productSelect.value;
                if (selectedBarcode) {
                    selectedProduct = products.find(product => product.barcode === selectedBarcode);
                    displayProductDetails(selectedProduct);
                } else {
                    clearProductDetails();
                    selectedProduct = null; // Resetowanie wybranego produktu
                }
            });

            // Obsługa dodawania produktu do zamówienia
            btnAddToOrder.addEventListener('click', function () {
                if (selectedProduct) {
                    // Wyświetlamy produkt w sekcji zamówienia
                    addProductToOrder(selectedProduct);
                } else {
                    alert("Wybierz produkt, który chcesz dodać do zamówienia.");
                }
            });

            // Funkcja do dodawania produktu do zamówienia
            function addProductToOrder(product) {
                const orderList = document.getElementById('receiptItems');
                const newItem = document.createElement('div');
                newItem.classList.add('receipt-item');
                newItem.dataset.barcode = product.barcode; // Dodajemy dane produktu do elementu

                newItem.innerHTML = `
                        <span>1</span>
                        <span>${product.name}</span>
                        <span>1</span>
                        <span>${product.price}</span>
                        <span>${product.price}</span>
                        <button class="btn-delete-item">X</button>
                    `;

                // Aktualizujemy sumę zamówienia
                currentTotal += product.price;
                updateTotalAmount();

                // Obsługuje usuwanie produktu z zamówienia
                const deleteBtn = newItem.querySelector('.btn-delete-item');
                deleteBtn.addEventListener('click', function () {
                    // Zmniejszamy sumę zamówienia
                    currentTotal -= product.price;
                    updateTotalAmount();
                    newItem.remove();
                });

                orderList.appendChild(newItem);
            }

            // Obsługa usuwania wybranego produktu
            btnRemoveProduct.addEventListener('click', function () {
                if (selectedProduct) {
                    // Usuwamy produkt z zamówienia, jeśli jest
                    const items = document.querySelectorAll('.receipt-item');
                    items.forEach(item => {
                        if (item.dataset.barcode === selectedProduct.barcode) {
                            const itemPrice = parseFloat(item.querySelector('span:nth-child(5)').textContent);
                            // Zmniejszamy sumę zamówienia
                            currentTotal -= itemPrice;
                            updateTotalAmount();
                            item.remove();
                        }
                    });
                } else {
                    alert("Wybierz produkt, który chcesz usunąć z zamówienia.");
                }
            });
        });






        $(document).ready(function () {
            $('#productSelect').select2({
                placeholder: '-- Wyszukaj po kodzie kreskowym --',
                allowClear: true
            });
        });


    </script>
    }}

<div class="modal fade" id="changeFuelPriceModal" tabindex="-1" aria-labelledby="changeFuelPriceModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="changeFuelPriceModalLabel">Zmień cenę paliwa</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Zamknij"></button>
            </div>

            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label for="fuelSelect" class="form-label">Wybierz paliwo</label>
                        <select id="fuelSelect" class="form-select">
                            <option selected disabled>-- wybierz paliwo --</option>
                            <option>Benzyna 95 (D1)</option>
                            <option>Benzyna 98 (D2)</option>
                            <option>ON (D3)</option>
                            <option>LPG (D4)</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="priceInput" class="form-label">Nowa cena (zł)</label>
                        <input type="number" class="form-control" id="priceInput" placeholder="np. 6.45" step="0.01" min="0">
                    </div>

                    <div class="mb-3">
                        <label for="dateFromInput" class="form-label">Data od kiedy obowiązuje</label>
                        <input type="datetime-local" class="form-control" id="dateFromInput">
                    </div>

                    <div class="mb-3">
                        <label for="dateToInput" class="form-label">Data do kiedy obowiązuje (opcjonalnie)</label>
                        <input type="datetime-local" class="form-control" id="dateToInput">
                    </div>
                </form>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
                <button type="button" class="btn btn-success" disabled>Zapisz zmianę</button>
            </div>

        </div>
    </div>
</div>
<style>
    /* Style CSS - możesz je umieścić w pliku .css lub w sekcji <style> */
    .css-grid-container {
        display: grid;
        /* Definiuje kolumny. repeat(3, 1fr) tworzy 3 kolumny o równej szerokości */
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
        padding: 20px;
        border: 1px solid #ccc;
    }

    .grid-item {
        background-color: #f0f0f0;
        border: 1px solid #ddd;
        height: 1.5em;
        width: 100%;
        padding: 15px;
        text-align: center;
        border-radius: 5px;
        display: flex;
        justify-content: center;
        align-items: center;
        color: red;
    }

    .grid-item-button {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        text-align: center;
        width: 100%;
        height: 10em;
        padding: 15px;
        margin: 0;
        background-color: #f0f0f0;
        border: 1px solid #ddd;
        border-radius: 5px;
        cursor: pointer;
        font-family: inherit;
        font-size: inherit;
        color: red;
        transition: background-color 0.3s ease;
        box-sizing: border-box;
    }

        .grid-item-button[data-id="1"] {
            background-color: rgba(0, 0, 255, 0.8);
            color: white;
        }

            .grid-item-button[data-id="1"]:hover {
                background-color: rgb(0, 0, 255);
            }

        .grid-item-button[data-id="2"] {
            background-color: rgba(0, 128, 0, 0.8);
            color: white; /* Zmień kolor tekstu na biały */
        }

            .grid-item-button[data-id="2"]:hover {
                background-color: rgb(0, 128, 0);
            }

        .grid-item-button[data-id="3"] {
            background-color: rgba(0, 0,0, 0.8);
            color: white; /* Zmień kolor tekstu na biały */
        }

            .grid-item-button[data-id="3"]:hover {
                background-color: rgb(100, 100, 100);
            }

        .grid-item-button:hover {
            background-color: #e0e0e0;
        }

        .grid-item-button.clicked {
            background-color: #8bc34a; /* Zmieniony kolor po kliknięciu (zielony) */
        }

    .button-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 100%;
    }

    .distributor-name {
        font-size: 1.2em;
        font-weight: bold;
        color: white;
        align-content: flex-end;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
    }

    .distributor-details {
        display: flex;
        flex-direction: column;
        font-size: 14px;
    }

    .bottom-details {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        font-size: 0.9em;
        color: #555;
    }

        .bottom-details .amount-display, .bottom-details .price-display {
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
            flex-basis: 50%;
            padding-right: 5px;
            box-sizing: border-box;
            color: white;
        }

        .bottom-details .amount-display {
            text-align: left;
        }

        .bottom-details .price-display {
            text-align: right;
        }

    .distributor-details span {
        margin: 2px 0;
    }

    .item-calculated-value {
        font-size: 1.8em;
        font-weight: bold;
        color: red;
        margin: auto 0;
        text-shadow: 1px 1px 3px rgba(0,0,0,0.6);
    }

    .item-value {
        font-size: 0.9em;
        color: #555;
        margin-top: 5px;
    }
</style>

