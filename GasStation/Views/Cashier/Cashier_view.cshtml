

@model GasStation.DTO.CreateOrderDTO
@using GasStation.DTO

@{

    ViewBag.Title = "Cashier_view";
    var items = ViewBag.Items as List<GasStation.DTO.RefuelingEntryDTO> ?? new List<GasStation.DTO.RefuelingEntryDTO>();
    var fuelPrices = ViewBag.FuelPrices as Dictionary<int, decimal> ?? new Dictionary<int, decimal>();
    var loggedEmployeePesel = ViewBag.CurrentCashierPesel;



}
<link href="~/Content/css/kasjer-style.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<!-- Dodaj JS Select2 -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>

<div class="cashier-interface">
    <header class="top-bar">
        <div class="info-left">
            <span>KASA: 1</span>

            <span>KASJER: @(ViewBag.CurrentCashierFullName ?? "Tutaj powinno sie zaladowac imie z ViewBag.CurrentCashierFullName")</span>

        </div>
        <div class="info-center time-display" id="timeDisplay">

            @{

                var currentTime = DateTime.Now;
            }
            @currentTime.ToString("HH:mm") <span class="date-small">@currentTime.ToString("dd/MM/yyyy")</span>
        </div>
        <div class="info-right">
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#changeFuelPriceModal"> Zmień cenę paliwa </button>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCustomerModal">Dodaj klienta</button>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addProductModal">Dodaj produkt</button>
        </div>
    </header>

    <main class="main-content">

        <section class="left-panel">
            <div class="css-grid-container">
                @{

                    int i = 1;

                }

                @foreach (var item in items)
                {

                    <button type="button" class="grid-item-button"
                            data-id="@item.FuelId"
                            data-amount="@item.Amount"
                            data-price="@item.PriceAtSale"
                            data-value="@(item.Amount * item.PriceAtSale)">
                        <span class="distributor-id">@(i++)</span>
                        <div class="distributor-name">@item.FuelName</div>

                        <div class="item-calculated-value">
                            @((item.Amount * item.PriceAtSale).ToString("N2", new System.Globalization.CultureInfo("pl-PL"))) zł
                        </div>
                        <div class="bottom-details">

                            <span class="amount-display">Ilość: @item.Amount.ToString() L</span>
                            <span class="price-display">Cena: @item.PriceAtSale.ToString() zł/L</span>
                        </div>
                    </button>

                   
                   
                }
            </div>

        </section>

        <section class="middle-panel">
            <div class="display-input-area">
                <div class="item-details-preview">
                    <label for="productSelect">Wybierz produkt:</label>
                    <select id="productSelect" class="product-select">
                        <option value="">-- Wyszukaj po kodzie kreskowym --</option>
                        <!-- Produkty będą dodawane tutaj -->
                    </select>
                    <div id="productDetails"></div>
                    <button id="btnAddToOrder" class="action-btn">Dodaj do zamówienia</button>
                </div>
            </div>
            <div class="logo-container">
                <img src="~/Content/img/gas.png" alt="Gas" class="logo-small-bottom" />
            </div>
        </section>

        <section class="right-panel">
            <div class="receipt-header">
                <span>Lp.</span>
                <span>Nazwa towaru</span>
                <span>Ilość</span>
                <span>Cena</span>
                <span>Wartość</span>
                <span>&nbsp;</span>
            </div>

            <div id="receiptItems" class="receipt-items-container">
                <!-- Produkty będą tutaj dynamicznie dodawane -->
            </div>



            <div class="receipt-summary">
                <div>Do zapłaty (PLN): <span id="totalAmount" class="total-amount-value">0.00</span></div>
            </div>

            <div class="payment-options">
                <button class="payment-btn large-btn" id="btnCash">PŁATNOŚĆ</button>
            </div>
        </section>
    </main>

    <footer class="bottom-bar">


        <form id="logoutForm" action="@Url.Action("Logout","Home")" method="post" class="logout-form">
      @Html.AntiForgeryToken()
      <button type="submit" class="btn btn-danger logout-form__btn">Wyloguj</button>
    </form>
    <button id="btnRandomizeRefuelings" class="action-btn bottom-bar__randomize">Losuj Nowe Tankowania</button>
      
    </footer>
</div>


@section Scripts {



    <script>
            document.addEventListener('DOMContentLoaded', () => {

                const fuelPrices = @Html.Raw(Json.Encode(fuelPrices));


        function initializeFuelButtons() {
            document.querySelectorAll('.grid-item-button').forEach((button, index) => {
                const fuelId = (index % 3) + 1;
                const fuelName = button.dataset.fuelName;
                const amount = parseFloat(button.dataset.amount);
                const price = fuelPrices[fuelId] || 5.50;
                const value = amount * price;


                button.dataset.id = fuelId;
                button.dataset.price = price.toFixed(2);
                button.dataset.value = value.toFixed(2);

 
                button.querySelector('.price-display').textContent = `Cena: ${price.toFixed(2).replace('.', ',')} zł/L`;
                button.querySelector('.item-calculated-value').textContent = `${value.toFixed(2).replace('.', ',')} zł`;
            });
        }

        initializeFuelButtons();
    });
        document.addEventListener('DOMContentLoaded', () => {
            const loggedInEmployeePesel = '@loggedEmployeePesel';
                let currentTotal = 0;
                const totalAmount = id('totalAmount');
                const productSelect = id('productSelect');
                const receiptItems = id('receiptItems');
                const timeDisplay = id('timeDisplay');
                const addCustomerModal = id('addCustomerModal');
                const addProductModal = id('addProductModal')
                const addCustomerForm = id('ajaxAddCustomerForm');
                const addProductForm = id('ajaxAddProductForm')
                const customerAlert = id('addCustomerModalAlertPlaceholder');
                const productAlert = id('addProductModalAlertPlaceholder')
                const changeFuelModal = id('changeFuelPriceModal');
                const fuelTypeSelect = id('fuelTypeSelectDropdown');
                const newPriceInput = id('newPriceInput');
                const priceAlert = id('changePriceModalAlertPlaceholder');
                const employeeId = dataset(id('currentEmployeeIdentifier'), 'employeeIdentifier');
                const fuelTypesMap = {
                    1: "Benzyna",
                    2: "Diesel",
                    3: "Gaz"
                }

                const btns = {
                    add: id('btnAddToOrder'),
                    randomFuel: id('btnRandomizeRefuelings'),
                    saveCustomer: id('btnSaveCustomerAjax'),
                    saveProduct: id('btnSaveProductAjax'),
                    savePrice: id('btnSaveFuelPrice'),
                    cash: id('btnCash'),
                    card: id('btnCard'),
                    invoice: id('btnInvoice')
                };

                const fuelButtons = [...document.querySelectorAll('.grid-item-button')];
                let fuelPrices = {};
                let products = [];
                let selectedProduct = null;
               
                fetchPrices();
                fetchProducts();
                initFuelButtons();
                initRandomFuel();
                initProducts();
                initCustomerModal();
                initProductModal();
                initChangeFuelModal();
                initPayments();
                initSelect2();
                updateTime();
                setInterval(updateTime, 60000);

                function id(name) { return document.getElementById(name); }
                function dataset(el, key) { return el && el.dataset[key] || null; }
                function parseNum(str) { const n = parseFloat(str.replace(',', '.')); return isNaN(n) ? 0 : n; }
                function fmtPLN(n) { return n.toFixed(2).replace('.', ','); }
                function updateTotal() { totalAmount.textContent = fmtPLN(currentTotal); }
                function alertIn(el, msg, type) { if (el) el.innerHTML = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">${msg}<button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>`; }

            function fetchPrices() {
                return fetch('/Fuel/GetCurrentPricesJson')
                    .then(r => r.ok ? r.json() : Promise.reject())
                    .then(data => {
                        fuelPrices = data.reduce((o, { FuelId, Price }) => (o[FuelId] = Price, o), {});

                        updateFuelButtonsWithNewPrices();
                        return fuelPrices;
                    })
                    .catch(err => {
                        console.error('Error fetching fuel prices:', err);
                        throw err;
                    });
            }

                function fetchProducts() {
                    fetch('/Product/GetAllProductsJson')
                        .then(r => r.ok ? r.json() : Promise.reject())
                        .then(data => {
                            products = data;
                            populateProductDropdown();
                        })
                        .catch(err => console.error('Error fetching products:', err));
                }

                function populateProductDropdown() {
                    if (!productSelect) return;

                    productSelect.innerHTML = '<option value="">-- Wyszukaj produkt --</option>';

                    products.forEach(p => {

                        const option = new Option(`${p.Name} (${fmtPLN(p.Price)} zł)`, p.ProductId);
                        option.dataset.product = JSON.stringify(p);
                        productSelect.add(option);
                    });
                }

                function initFuelButtons() {
   
                    randomizeFuelsOnLoad();

                    fuelButtons.forEach(b => {
                        b.addEventListener('click', () => {
                            const fuelId = b.dataset.id;
                            const fuelName = b.dataset.fuelName || `Paliwo ${fuelId}`;
                            const amount = parseNum(b.dataset.amount);
                            const price = parseNum(b.dataset.price);
                            const value = parseNum(b.dataset.value);
                            const isActive = b.classList.contains('active-refueling');

                            b.classList.toggle('active-refueling');

                            if (b.classList.contains('active-refueling') && !isActive) {
                                currentTotal += value;
                                addFuelToReceipt(fuelId, fuelName, amount, price, value);
                            } else if (!b.classList.contains('active-refueling') && isActive) {
                                currentTotal -= value;
                                removeFuelFromReceipt(fuelId);
                            }
                            updateTotal();
                        });
                    });
                }

                function addFuelToReceipt(fuelId, fuelName, amount, price, value) {
                    const div = document.createElement('div');
                    div.className = 'receipt-item';
                    div.dataset.fuelId = fuelId;
                    div.innerHTML = `
                    <span>${receiptItems.children.length + 1}</span>
                    <span>${fuelName}</span>
                    <span>${fmtPLN(amount)} L</span>
                    <span>${fmtPLN(price)}</span>
                    <span>${fmtPLN(value)}</span>
                    <button class="btn-delete-item">X</button>
                `;

                    div.querySelector('.btn-delete-item').addEventListener('click', () => {
                        currentTotal -= value;
                        updateTotal();
                        div.remove();
                        
                        const fuelButton = fuelButtons.find(b => b.dataset.id === fuelId);
                        if (fuelButton) {
                            fuelButton.classList.remove('active-refueling');
                        }
                    });

                    receiptItems.append(div);
                }

                function removeFuelFromReceipt(fuelId) {
                    const items = [...receiptItems.children];
                    const itemToRemove = items.find(i => i.dataset.fuelId === fuelId);
                    if (itemToRemove) {
                        itemToRemove.remove();
                    }


                    items.forEach((item, index) => {
                        if (item.querySelector('span')) {
                            item.querySelector('span').textContent = index + 1;
                        }
                    });
                }

                function randomizeFuelsOnLoad() {
                    fuelButtons.forEach((b, index) => {
                        const fuelId = (index % 3) + 1;
                        const fuelName = fuelTypesMap[fuelId] || `Paliwo ${fuelId}`;
                        const price = fuelPrices[fuelId] || 5.50; 
                        const amount = (Math.random() * 39 + 1).toFixed(2);
                        const value = parseFloat(amount) * price;

                
                        b.dataset.id = fuelId;
                        b.dataset.fuelName = fuelName;
                        b.dataset.amount = amount;
                        b.dataset.price = price.toFixed(2);
                        b.dataset.value = value.toFixed(2);

              
                        text(b, '.distributor-name', fuelName);
                        text(b, '.amount-display', `${amount.replace('.', ',')}`);
                        text(b, '.price-display', `${fmtPLN(price)} zł/L`);
                        text(b, '.item-calculated-value', `${fmtPLN(value)} zł`);

                        applyFuelColorsToButton(b);
                    });
                }

                function fetchFuelTypes() {
                    return fetch('/Fuel/GetAllFuelsJson')
                        .then(r => r.ok ? r.json() : Promise.reject('Failed to fetch fuel types'))
                        .then(data => {
                  
                            fuelTypesMap = {
                                1: "Benzyna",
                                2: "Diesel",
                                3: "Gaz"
                            };
                            return data;
                        })
                        .catch(err => {
                            console.error('Error fetching fuel types:', err);
                      
                            fuelTypesMap = {
                                1: "Benzyna",
                                2: "Diesel",
                                3: "Gaz"
                            };
                            return fuelTypesMap;
                        });
                }




                function initRandomFuel() {
                    if (!btns.randomFuel) return;
                    btns.randomFuel.addEventListener('click', () => {
                     
                        [...receiptItems.children].forEach(item => {
                            if (item.dataset.fuelId) {
                                currentTotal -= parseNum(item.children[4].textContent.replace(',', '.'));
                                item.remove();
                            }
                        });

             
                        fuelButtons.forEach(b => {
                            b.classList.remove('active-refueling');
                        });

              
                        fuelButtons.forEach((b, index) => {
                            const randomFuelId = Math.floor(Math.random() * 3) + 1;
                            const fuelName = fuelTypesMap[randomFuelId];
                            const price = fuelPrices[randomFuelId];
                            if (!price) {
                                console.error(`Brak ceny dla paliwa ID: ${randomFuelId}`);
                                return;
                            }

                            const amount = (Math.random() * 39 + 1).toFixed(2);
                            const value = parseFloat(amount) * price;

                            b.dataset.id = randomFuelId;
                            b.dataset.fuelName = fuelName;
                            b.dataset.amount = amount;
                            b.dataset.price = price.toFixed(2);
                            b.dataset.value = value.toFixed(2);

                            text(b, '.distributor-name', fuelName);
                            text(b, '.amount-display', `${amount.replace('.', ',')}`);
                            text(b, '.price-display', `${fmtPLN(price)} zł/L`);
                            text(b, '.item-calculated-value', `${fmtPLN(value)} zł`);

                            applyFuelColorsToButton(b);
                        });

                        updateTotal();
                    });
                }

                function applyFuelColorsToButton(button) {
                    const fid = parseNum(button.dataset.id);
                    const fuelName = fuelTypesMap[fid] || '';

       
                    button.classList.forEach(className => {
                        if (className.startsWith('fuel-type-')) {
                            button.classList.remove(className);
                        }
                    });

     
                    if (fid === 1) { // Benzyna
                        button.classList.add('fuel-type-benzyna');
                    } else if (fid === 2) { // Diesel
                        button.classList.add('fuel-type-diesel');
                    } else if (fid === 3) { // Gaz
                        button.classList.add('fuel-type-gaz');
                    }
                }



                function initProducts() {
                    if (productSelect) {
                        productSelect.addEventListener('change', () => {
                            const selectedOption = productSelect.options[productSelect.selectedIndex];
                            if (selectedOption && selectedOption.dataset.product) {
                                try {
                                    selectedProduct = JSON.parse(selectedOption.dataset.product);
                                    displayProductDetails(selectedProduct);
                                } catch (e) {
                                    console.error("Error parsing product data", e);
                                    selectedProduct = null;
                                    id('productDetails').innerHTML = '';
                                }
                            } else {
                                selectedProduct = null;
                                id('productDetails').innerHTML = '';
                            }
                        });
                    }

                    btns.add && btns.add.addEventListener('click', () => selectedProduct && addToReceipt(selectedProduct));
                }

                function displayProductDetails(p) {
                    id('productDetails').innerHTML = p ?
                        `<h3>Produkt: ${p.Name}</h3>
                       <p><strong>ID produktu:</strong> ${p.ProductId}</p>
                       <p><strong>Cena:</strong> ${fmtPLN(p.Price)} zł</p>` : '';
                }

                function addToReceipt(p) {
                    const div = document.createElement('div');
                    div.className = 'receipt-item';
                    div.dataset.productId = p.ProductId;
                    div.innerHTML = `<span>1</span><span>${p.Name}</span><span>1</span><span>${fmtPLN(p.Price)}</span><span>${fmtPLN(p.Price)}</span><button class="btn-delete-item">X</button>`;
                    div.querySelector('.btn-delete-item').addEventListener('click', () => {
                        currentTotal -= p.Price;
                        updateTotal();
                        div.remove();
                    });
                    receiptItems.append(div);
                    currentTotal += p.Price;
                    updateTotal();
                }

                function removeSelected() {
                    if (selectedProduct) {
                        [...receiptItems.children].filter(i => i.dataset.productId == selectedProduct.ProductId)
                            .forEach(i => {
                                currentTotal -= parseNum(i.children[4].textContent.replace(',', '.'));
                                updateTotal();
                                i.remove();
                            });
                    }

                }

                function initCustomerModal() {
                    btns.saveCustomer && btns.saveCustomer.addEventListener('click', () => {
                        const fd = new FormData(addCustomerForm);
                        fetch('/Customer/Create', {
                            method: 'POST',
                            body: fd,
                            headers: { 'Accept': 'application/json', 'X-Requested-With': 'XMLHttpRequest' }
                        })
                            .then(r => r.json()).then(data => {
                                if (data.success) {
                                    alertIn(customerAlert, data.message || 'Klient dodany', 'success');
                                    setTimeout(() => bootstrap.Modal.getInstance(addCustomerModal).hide(), 2000);
                                } else {
                                    const msgs = Array.isArray(data.errors) ? data.errors.flatMap(e => e.Value) : [data.message];
                                    alertIn(customerAlert, msgs.join('<br>'), 'danger');
                                }
                            }).catch(() => alertIn(customerAlert, 'Błąd połączenia', 'danger'));
                    });
                    addCustomerModal && addCustomerModal.addEventListener('hidden.bs.modal', () => customerAlert.innerHTML = '');
                } 


                function initProductModal() {
                    btns.saveProduct && btns.saveProduct.addEventListener('click', () => {
                        const fd = new FormData(addProductForm);
                        fetch('/Product/Create', {
                            method: 'POST',
                            body: fd,
                            headers: { 'Accept': 'application/json', 'X-Requested-With': 'XMLHttpRequest' }
                        })
                            .then(r => r.json()).then(data => {
                                if (data.success) {
                                    alertIn(productAlert, data.message || 'Produkt dodany', 'success');
                                    fetchProducts();
                                    setTimeout(() => bootstrap.Modal.getInstance(addProductModal).hide(), 2000);
                                } else {
                                    const msgs = Array.isArray(data.errors) ? data.errors.flatMap(e => e.Value) : [data.message];
                                    alertIn(productAlert, msgs.join('<br>'), 'danger');
                                }
                            }).catch(() => alertIn(productAlert, 'Błąd połączenia', 'danger'));
                    });
                    addProductModal && addProductModal.addEventListener('hidden.bs.modal', () => productAlert.innerHTML = '');

                } 


                function initChangeFuelModal() {
                    const changeFuelModal = document.getElementById('changeFuelPriceModal');
                    const fuelTypeSelect = document.getElementById('fuelTypeSelect');
                    const newPriceInput = document.getElementById('newPriceInput');
                    const priceAlert = document.getElementById('changePriceModalAlertPlaceholder');
                    const btnSavePrice = document.getElementById('btnSaveFuelPrice');
                    const changeFuelPriceForm = document.getElementById('changeFuelPriceForm');

                   
                    changeFuelModal.addEventListener('hidden.bs.modal', () => {
                        priceAlert.innerHTML = '';
                        changeFuelPriceForm.reset();
                    });

                    // Handle save button click
                    btnSavePrice.addEventListener('click', async () => {
                        // Validate form
                        if (!changeFuelPriceForm.checkValidity()) {
                            changeFuelPriceForm.classList.add('was-validated');
                            return;
                        }

                        const fuelId = fuelTypeSelect.value;
                        const newPrice = parseFloat(newPriceInput.value);
                        const employeePesel = loggedInEmployeePesel; 

                        if (!fuelId || !newPrice || !employeePesel) {
                            showAlert(priceAlert, 'Wszystkie pola są wymagane', 'danger');
                            return;
                        }

                        try {
                            
                            const data = {
                                FuelId: parseInt(fuelId),
                                Price: newPrice,
                                EmployeePesel: employeePesel
                            };

                           
                            const response = await fetch('/Fuel/AddNewPrice', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Accept': 'application/json'
                                },
                                body: JSON.stringify(data)
                            });

                            const result = await response.json();

                            if (response.ok) {
                                showAlert(priceAlert, 'Cena paliwa została zaktualizowana', 'success');
                                await fetchPrices();
                                updateFuelButtonsWithNewPrices();
                                updateTotalAfterPriceChange();
                              
                                updateFuelPriceInUI(fuelId, newPrice);

                                
                                setTimeout(() => {
                                    bootstrap.Modal.getInstance(changeFuelModal).hide();
                                }, 2000);
                            } else {
                                showAlert(priceAlert, result.message || 'Wystąpił błąd podczas aktualizacji ceny', 'danger');
                            }
                        } catch (error) {
                            console.error('Error updating fuel price:', error);
                            showAlert(priceAlert, 'Wystąpił błąd podczas komunikacji z serwerem', 'danger');
                        }
                    });
                }

                function updateFuelPriceInUI(fuelId, newPrice) {
                  
                    fuelButtons.forEach(button => {
                        if (button.dataset.id === fuelId) {
                            const amount = parseFloat(button.dataset.amount);
                            const value = amount * newPrice;

                         
                            button.dataset.price = newPrice.toFixed(2);
                            button.dataset.value = value.toFixed(2);

                            const priceDisplay = button.querySelector('.price-display');
                            if (priceDisplay) {
                                priceDisplay.textContent = `${newPrice.toFixed(2).replace('.', ',')} zł/L`;
                            }

                            const valueDisplay = button.querySelector('.item-calculated-value');
                            if (valueDisplay) {
                                valueDisplay.textContent = `${value.toFixed(2).replace('.', ',')} zł`;
                            }
                        }
                    });

         
                    const receiptItems = document.querySelectorAll('#receiptItems .receipt-item');
                    receiptItems.forEach(item => {
                        if (item.dataset.fuelId === fuelId) {
                            const amount = parseFloat(item.children[2].textContent.replace(',', '.'));
                            const value = amount * newPrice;

                  
                            item.children[3].textContent = newPrice.toFixed(2).replace('.', ',');
                            item.children[4].textContent = value.toFixed(2).replace('.', ',');

                            // Aktualizacja sumy
                            updateTotalAfterPriceChange();
                        }
                    });
                }

                function updateTotalAfterPriceChange() {
                    let newTotal = 0;
                    const receiptItems = document.querySelectorAll('#receiptItems .receipt-item');

                    receiptItems.forEach(item => {
                        const value = parseFloat(item.children[4].textContent.replace(',', '.'));
                        newTotal += value;
                    });

                    currentTotal = newTotal;
                    updateTotal();
                } 0



                function showAlert(container, message, type) {
                    container.innerHTML = `
                             <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                            ${message}
                             <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                             </div>`;
                }

                function updateFuelButtonsWithNewPrices() {
                    fuelButtons.forEach(button => {
                        const fuelId = button.dataset.id;
                        const currentPrice = fuelPrices[fuelId];

                        if (currentPrice) {
                            const amount = parseFloat(button.dataset.amount);
                            const value = amount * currentPrice;

                            button.dataset.price = currentPrice.toFixed(2);
                            button.dataset.value = value.toFixed(2);

                            // Update displayed price
                            const priceDisplay = button.querySelector('.price-display');
                            if (priceDisplay) {
                                priceDisplay.textContent = `${currentPrice.toFixed(2).replace('.', ',')} zł/L`;
                            }

                            // Update displayed value
                            const valueDisplay = button.querySelector('.item-calculated-value');
                            if (valueDisplay) {
                                valueDisplay.textContent = `${value.toFixed(2).replace('.', ',')} zł`;
                            }
                        }
                    });
                }


                function initPayments() {
                    if (btns.cash) {
                        btns.cash.addEventListener('click', () => {
                            if (currentTotal <= 0) {
                                alert('Nie można zrealizować płatności - paragon jest pusty');
                                return;
                            }

                            // Sprawdź czy modal płatności istnieje
                            if (document.getElementById('paymentModal')) {
                                openCreate(fmtPLN(currentTotal));
                            } else {
                                console.error('Modal płatności nie został znaleziony');
                                alert('Błąd systemu - brak formularza płatności');
                            }
                        });
                    }
                }

                function initSelect2() {
                    if (window.$ && $.fn.select2) {
                        $('#productSelect').select2({
                            placeholder: '-- Wyszukaj produkt --',
                            allowClear: true
                        });
                    }
                }

                function text(parent, sel, t) {
                    const e = parent.querySelector(sel);
                    if (e) e.textContent = t;
                }

                function updateTime() {
                    const now = new Date();
                    timeDisplay.innerHTML = now.toLocaleTimeString('pl-PL', { hour: '2-digit', minute: '2-digit' }) +
                        ' <span class="date-small">' + now.toLocaleDateString('pl-PL') + '</span>';


                }
            });

        function openCreate(totalAmount) {
            // Set the total amount in the payment modal
            document.getElementById('paymentTotalAmount').textContent = totalAmount;

            // Show the modal immediately
            const modal = new bootstrap.Modal(document.getElementById('paymentModal'));
            modal.show();

            // The dropdowns will be populated by the DOMContentLoaded event listeners
            // that are already fetching /Customer/GetAllCustomersJson and /Employee/GetAllEmployeesJson
        }

        function populateDropdown(id, data) {
            const select = document.getElementById(id);
            if (!select) return;

            // Zachowaj pierwszą opcję (placeholder)
            const placeholder = select.options[0];
            select.innerHTML = '';
            select.appendChild(placeholder);

            data.forEach(item => {
                const option = document.createElement('option');
                option.value = item.value;
                option.textContent = item.text;
                select.appendChild(option);
            });
        }

        function showPaymentModal(totalAmount) {
            const modal = new bootstrap.Modal(document.getElementById('paymentModal'));
            document.getElementById('paymentTotalAmount').textContent = totalAmount;
            modal.show();
        }
    </script>
}


@Html.Partial("AddCustomerModal")
@Html.Partial("ChangeFuelPriceModal")
@Html.Partial("../Order/Create")
@Html.Partial("AddProductModal")